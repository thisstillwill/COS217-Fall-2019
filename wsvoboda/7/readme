Assignment 7 readme File

------------------------------------------------------------------------
What is your name?

-William Svoboda

------------------------------------------------------------------------
What authorized sources of information did you use to complete
the assignment? COPY THE LIST of authorized sources of information
given in the "Policies" web page to this section of the readme file,
and edit it as appropriate.

-The course's lectures.

-The course's precepts.

-The course's website.

-Documents that are referenced directly by the course's website. Such
documents include the course's lecture slides and precept handouts.

-The course's textbooks.

-The man pages on the armlab cluster.

-The course's current staff members outside of class time through
office hours.

I went to Josh Zhang's office hours he had on 1/6.

-The course's current staff members outside of class time through
e-mail.

I emailed my preceptor Josh Zhang around 30 times(!!).

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

- I thought it was definitely the hardest assignment I did for the
course (not the most frustrating- that was the assembly assignment for
me). I think the complexity of this project was the hardest thing to
wrap my head around. I could have made more progress faster if I had
followed the dfa.c precept code faster instead of trying to do things
like implement my own readline function. This was only the second major
multi file project I've done so far at Princeton, and it was a good
stone. At least I can put it on my GitHub.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

- Sometimes when I run ./testishdiff -b commands_demo, I run into this
output:

Sun Jan 12 22:13:04 EST 2020				      |	Sun Jan 12 22:13:05 EST 2020
Sun Jan 12 22:13:04 EST 2020				      	    	      |	    Sun Jan 12 22:13:05 EST 2020
-rw-------. 1 wsvoboda utempter       0 Jan 12 20:06 temp.txt |		      -rw-------. 1 wsvoboda utempter       0 Jan 12 22:13 temp.txt

- While I know it is ok for the dates to be different, I am not sure if
the differences between each temp.txt is a sign of invalid behavior.
I would think not, but I am not actually sure how the temp.txt
generation works. I am not sure if each program outputs a distinct
temp.txt. Perhaps the dates are different sometimes because the temp.txt
is generated at a different time. Running the tests again produces no
errors.

------------------------------------------------------------------------
What warnings does splint generate on your code, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

builtin.c: (in function handleBuiltIn)
builtin.c:49:16: Variable uLength used before definition
  An rvalue is used that may not be initialized to a value on some
  execution path. (Use -usedef to inhibit warning)
builtin.c:83:16: Variable uLength used before definition
builtin.c:110:16: Variable uLength used before definition
builtin.c:118:26: Variable ptr used before definition
    
- I will answer for all 4 warnings. splint generates errors because for
all cases I have conditionals like so:

if (pcArgs == NULL)
      {
        fprintf(stderr, "%s: missing variable\n", pcPgmName);
	return TRUE;
	}
else if (uLength > 2)
	{
	fprintf(stderr, "%s: too many arguments\n", pcPgmName);
	return TRUE;
	}

However, if pcArgs is not NULL uLength will always be initialized,
because by definition a non NULL pcArgs means that uLength can be
initialized to the number of arguments stored in the DynArray. I thought
this kind of logic was a tough choice to make, but I did so because
the built in commands are all different and all need to print different
errors based on the number/lack of arguments in a command.

------------------------------------------------------------------------
What warnings does critTer generate on your code, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

Checking lex.c

   lex.c: line 70: low priority:
      A loop should consist of fewer than 35 lines;
         this loop consists of 124 lines; consider refactoring

- I feel this is fine. My lex.c uses a DFA approach, and the model DFA
given to us in DFA.c is actually of a similar length.

   lex.c: line 27: medium priority:
      Function names should be prefixed with module names;
         function name freeTokens does not match module name lex.c

- I feel this is fine. I did not want to prefix this because the
function code is shared with other files, and it really is just wrapper
code to take advantage of DynArray_map.

   lex.c: line 32: low priority:
      A function should consist of fewer than 140 lines;
         this function consists of 160 lines; consider refactoring

- I disagree. The bulk of the code is made up of the DFA, and I don't
think there is enough outside of that to justify splitting things up
into static functions

   lex.c: line 27: medium priority:
      Do you want to validate 'pvElement' through an assert?
- Not a concern to me, I already know the function will be used over a
dynarray of tokens, and I am confident that tokens cannot be NULL in my
dynarray (and if a token was null, it would be caught by an assert in my
Token_free function.

   lex.c: line 27: medium priority:
      Do you want to validate 'pvExtra' through an assert?
- Not a concern to me, pvExtra is not even used because it is only there
to match with the function prototype for DynArray_map.

   lex.c: line 90: low priority:
      This area is deeply nested at level 4, consider refactoring

   lex.c: line 116: low priority:
      This area is deeply nested at level 4, consider refactoring

   lex.c: line 129: low priority:
      This area is deeply nested at level 4, consider refactoring

   lex.c: line 137: low priority:
      This area is deeply nested at level 4, consider refactoring

   lex.c: line 152: low priority:
      This area is deeply nested at level 4, consider refactoring

- I will address the above 5 warnings. All of them are triggered by
an operation to the dynarray. The level 4 nesting comes from testing
iRet to see if a failure occurred. I feel this is acceptable, since
there is no other way to test for this.

Checking syn.c

   syn.c: line 55: low priority:
      A loop should consist of fewer than 35 lines;
         this loop consists of 71 lines; consider refactoring
- I disagree. The loop is understandable, because all it is doing is
processing the token array one by one. Much of the length is from the
amount of code needed to handle stdin redirection and a normal command
argument, but splitting these up into separate functions would be
somewhat redundant since they would only be used once.

   syn.c: line 76: low priority:
      This area is deeply nested at level 4, consider refactoring

   syn.c: line 90: low priority:
      This area is deeply nested at level 4, consider refactoring

   syn.c: line 99: low priority:
      This area is deeply nested at level 4, consider refactoring

   syn.c: line 113: low priority:
      This area is deeply nested at level 4, consider refactoring

- I will address the above 4 warnings. The extra level of nesting is due
to having to discern whether a token is stdin or stdout redirection.
Checking this causes one level of nesting by itself. I feel I have done
a good job adding comments and spacing to make each section clear.

Checking command.c

   command.c: line 39: medium priority:
      Do you want to validate 'pcIn' through an assert?

   command.c: line 39: medium priority:
      Do you want to validate 'pcOut' through an assert?

- I will address the above 2 warnings. Validating pcIn and pcOut would
possibly be detrimental, because my command struct only cares if the
command name is defined. A command does not necessarily need the file
names for stdin/stdout redirection or a list of arguments, so it is ok
if those things are NULL.

Checking builtin.c

   builtin.c: line 28: medium priority:
      Variable/function name 'cd' is too short

   builtin.c: line 29: medium priority:
      Variable/function name 'ex' is too short

- I will address the above 2 warnings. I disagree that cd is too short,
it is literally the name of the command 'cd.' If I had made it longer it
would have been more confusing to me. I feel the same way about 'ex,'
and even for an outside reader I clearly comment the meaning of the
string at the top of the function.

Checking ___ish.c

   ___ish.c: line 226: low priority:
      A loop should consist of fewer than 35 lines;
         this loop consists of 80 lines; consider refactoring
- I disagree, the code has already been refactored to take advantage of
multiple different static functions. Everything I have left in the loop
is what I feel belongs in the domain of the main function, which is the
true "client" part of the program.

   ___ish.c: line 67: medium priority:
      Do you want to validate 'pvElement' through an assert?
- Not a concern to me, I already know the function will be used over a
dynarray of tokens, and I am confident that tokens cannot be NULL in my
dynarray (and if a token was null, it would be caught by an assert in my
Token_free function.

   ___ish.c: line 67: medium priority:
      Do you want to validate 'pvExtra' through an assert?
- Not a concern to me, pvExtra is not even used because it is only there
to match with the function prototype for DynArray_map.

   ___ish.c: line 123: medium priority:
      Do you want to validate 'pcIn' through an assert?

   ___ish.c: line 123: medium priority:
      Do you want to validate 'pcOut' through an assert?

- I will address the two warnings above. I do not validate them because
a NULL pcIn or pcOut is valid, it simply means to my function that there
is no redirection.

   ___ish.c: line 254: low priority:
      This area is deeply nested at level 4, consider refactoring

   ___ish.c: line 259: low priority:
      This area is deeply nested at level 5, consider refactoring

   ___ish.c: line 262: low priority:
      This area is deeply nested at level 5, consider refactoring

   ___ish.c: line 266: low priority:
      This area is deeply nested at level 5, consider refactoring

   ___ish.c: line 283: low priority:
      This area is deeply nested at level 5, consider refactoring

   ___ish.c: line 274: low priority:
      This area is deeply nested at level 6, consider refactoring

   ___ish.c: line 277: low priority:
      This area is deeply nested at level 6, consider refactoring

   ___ish.c: line 287: low priority:
      This area is deeply nested at level 5, consider refactoring

   ___ish.c: line 296: low priority:
      This area is deeply nested at level 5, consider refactoring

- I will address the nine warnings above. For most of them, the warning
is caused by testing the success of certain operations with an if
statement, such as flushing stdin/out. For the others, it is simply a
necessity of handling commands within the main function. I thought here
was best do so because it is the client that is actually executing the
command and I thought it meshed well with the signal handling code.

Checking ___ishlex.c

   ___ishlex.c: line 26: medium priority:
      Do you want to validate 'pvElement' through an assert?

   ___ishlex.c: line 26: medium priority:
      Do you want to validate 'pvExtra' through an assert?

   ___ishlex.c: line 35: medium priority:
      Do you want to validate 'pvElement' through an assert?

   ___ishlex.c: line 35: medium priority:
      Do you want to validate 'pvExtra' through an assert?

- I will address the 4 warnings above. I do not validate pvElement,
because I know I will treat it as a Token, and I already assert that
a token is not NULL when I write or free it. I do not validate pvExtra
because it is not used, and is just there to match the function
prototype for DynArray_map.

Checking ___ishsyn.c

   ___ishsyn.c: line 28: medium priority:
      Do you want to validate 'pvElement' through an assert?

   ___ishsyn.c: line 28: medium priority:
      Do you want to validate 'pvExtra' through an assert?

- I will address the 2 warnings above. I do not validate pvElement,
because I know I will treat it as a Token, and I already assert that
a token is not NULL when I write or free it. I do not validate pvExtra
because it is not used, and is just there to match the function
prototype for DynArray_map.
------------------------------------------------------------------------