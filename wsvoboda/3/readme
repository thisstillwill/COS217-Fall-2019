Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

-William Svoboda

------------------------------------------------------------------------
What authorized sources of information did you use to complete
the assignment? COPY THE LIST of authorized sources of information
given in the "Policies" web page to this section of the readme file,
and edit it as appropriate.

-The course's lectures.

-The course's precepts.

-The course's website.

-Documents that are referenced directly by the course's website. Such
documents include the course's lecture slides and precept handouts.

-The man pages on the armlab cluster.

-The course's current staff members outside of class time through
office hours (discussed conceptual questions with Christopher Moretti
about linked list implementation of symbol tables during his Monday
office hours, debugged symtablelist.c with John Li during his Monday
office hours, discussed and debugged nonexpanding symtablehash.c with
Christopher Moretti when he assisted during Greg Chan's Thursday office
hours as well as discussed conceptual questions about valgrind memory
errors).

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

-None

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

- This assignment took far, far longer than it should have. The
challenge part, I feel, was not explained as well as it should have in
precept. The fact that each binding in the bucket needed to be rehashed,
and not just the first binding in the bucket, should have been
emphasized far more (especially considering we weren't allowed to ask
any more questions after). I have a big problem as well with the
challenge parts in general. If they were truly challenge parts then give
them extra credit. Since they only contribute to one's score out of 100,
I don't think all the extra restrictions are justified in this regard.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

-None

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 74: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 105: medium priority:
      Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 201: medium priority:
      Do you want to validate 'pfApply' through an assert?

   symtablelist.c: line 201: medium priority:
      Do you want to validate 'pvExtra' through an assert?

(ANSWER TO ALL FOUR MESSAGES)
- critTer does not actually give any warnings. Regarding pvValue, it is
fine if it is not validated through an assert, since in this symbol
table definition it is fine for a node to have a value equal to null.
Similarly, pfApply and pvExtra don't need to be checked since it is
simply a way for a client program to apply a function on all key-value
pairs, so pvApply and pvExtra don't need to be asserted. pvApply is
supplied by the client.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

- None

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

(ANSWER TO FIRST FOUR MESSAGES)
- critTer does not actually give any warnings. Regarding pvValue, it is
fine if it is not validated through an assert, since in this symbol
table definition it is fine for a node to have a value equal to null.
Similarly, pfApply and pvExtra don't need to be checked since it is
simply a way for a client program to apply a function on all key-value
pairs, so pvApply and pvExtra don't need to be asserted. pvApply is
supplied by the client.

   symtablehash.c: line 108: medium priority:
      Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 194: medium priority:
      Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 310: medium priority:
      Do you want to validate 'pfApply' through an assert?

   symtablehash.c: line 310: medium priority:
      Do you want to validate 'pvExtra' through an assert?

   symtablehash.c: line 148: low priority:
      This area is deeply nested at level 4, consider refactoring

- The nesting is an unfortunate side effect of what the expansion logic
does. Since every node, in every list, in every bucket of the array
needs to be rehashed, it is required to have nontrivial nesting.
Furthermore, I don't feel comfortable making the expansion a separate
function, since I don't want it to essentially copy everything a
separate put() function would have to do. The need to keep track of the
next node in a list while simultaneously rehashing the current node also
necessitates additional complexity.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.010000 seconds.
-- 5000 bindings consumed 1.010000 seconds.
-- 50000 bindings consumed 100.020000 seconds.
-- 500000 bindings consumed More than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.010000 seconds.
-- 50000 bindings consumed 0.390000 seconds.
-- 500000 bindings consumed 71.360000 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.010000 seconds.
-- 50000 bindings consumed 0.170000 seconds.
-- 500000 bindings consumed 2.070000 seconds.
