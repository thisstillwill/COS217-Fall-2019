William Svoboda Will Drury

// Prolog (readString)
0x400780 <readString>:       sub     sp, sp, #0x50
0x400784 <readString+4>:     stp     x19, x20, [sp]
0x400788 <readString+8>:     stp     x21, x30, [sp,#16]

// First loop setup
0x40078c <readString+12>:    mov     x19, #0x0                       // #0
0x400790 <readString+16>:    adrp    x21, 0x420000
0x400794 <readString+20>:    mov     w20, w19

// First loop
0x400798 <readString+24>:    ldr     x0, [x21,#72]
0x40079c <readString+28>:    bl      0x4005b0 <fgetc@plt>
0x4007a0 <readString+32>:    cmp     w0, #0xa
0x4007a4 <readString+36>:    b.eq    0x4007c0 <readString+64>
0x4007a8 <readString+40>:    cmn     w0, #0x1
0x4007ac <readString+44>:    b.eq    0x4007c0 <readString+64>
0x4007b0 <readString+48>:    add     x1, sp, #0x20
0x4007b4 <readString+52>:    strb    w0, [x19,x1]
0x4007b8 <readString+56>:    add     x19, x19, #0x1
0x4007bc <readString+60>:    b       0x400794 <readString+20>

// buff[i] = '\0'
0x4007c0 <readString+64>:    add     x0, sp, #0x20
0x4007c4 <readString+68>:    strb    wzr, [x0,w20,sxtw]

// Second loop setup
0x4007c8 <readString+72>:    mov     x0, #0x0                        // #0
0x4007cc <readString+76>:    adrp    x2, 0x420000
0x4007d0 <readString+80>:    add     x2, x2, #0x58
0x4007d4 <readString+84>:    add     x1, sp, #0x20

// Second loop
0x4007d8 <readString+88>:    ldrb    w1, [x0,x1]
0x4007dc <readString+92>:    strb    w1, [x0,x2]
0x4007e0 <readString+96>:    add     x0, x0, #0x1
0x4007e4 <readString+100>:   cmp     x0, #0x30
0x4007e8 <readString+104>:   b.ne    0x4007d4 <readString+84>

// Epilog and return
0x4007ec <readString+108>:   ldp     x19, x20, [sp]
0x4007f0 <readString+112>:   ldp     x21, x30, [sp,#16]
0x4007f4 <readString+116>:   add     sp, sp, #0x50
0x4007f8 <readString+120>:   ret

// prolog (getName)
0x4007fc <getName>:  sub     sp, sp, #0x10
0x400800 <getName+4>:        str     x30, [sp]

// printf("What is your name?\n");
0x400804 <getName+8>:        adrp    x0, 0x400000
0x400808 <getName+12>:       add     x0, x0, #0x938
0x40080c <getName+16>:       bl      0x4005e0 <puts@plt>

// readString()
0x400810 <getName+20>:       bl      0x400780 <readString>

// epilog and return
0x400814 <getName+24>:       ldr     x30, [sp]
0x400818 <getName+28>:       add     sp, sp, #0x10
0x40081c <getName+32>:       ret

// Prolog (main)
0x400820 <main>:     sub     sp, sp, #0x10
0x400824 <main+4>:   stp     x19, x30, [sp]

// mprotect(...);
0x400828 <main+8>:   adrp    x19, 0x420000
0x40082c <main+12>:  add     x19, x19, #0x58
0x400830 <main+16>:  and     x0, x19, #0xfffffffffffff000
0x400834 <main+20>:  mov     x1, #0x1                        // #1
0x400838 <main+24>:  mov     w2, #0x7                        // #7
0x40083c <main+28>:  bl      0x400610 <mprotect@plt>

// getName();
0x400840 <main+32>:  bl      0x4007fc <getName>

// if (strcmp(name, "Andrew Appel") != 0) skip assignment to grade
0x400844 <main+36>:  mov     x0, x19
0x400848 <main+40>:  adrp    x1, 0x400000
0x40084c <main+44>:  add     x1, x1, #0x950
0x400850 <main+48>:  bl      0x4005f0 <strcmp@plt>
0x400854 <main+52>:  cbnz    w0, 0x400864 <main+68>

// grade = 'B';
0x400858 <main+56>:  mov     w1, #0x42                       // #66
0x40085c <main+60>:  adrp    x0, 0x420000
0x400860 <main+64>:  strb    w1, [x0,#68]

// printf("%c is your grade.\n", grade); 
0x400864 <main+68>:  adrp    x0, 0x400000
0x400868 <main+72>:  add     x0, x0, #0x960
0x40086c <main+76>:  adrp    x1, 0x420000
0x400870 <main+80>:  ldrb    w1, [x1,#68]
0x400874 <main+84>:  bl      0x400600 <printf@plt>

// printf("Thank you, %s.\n", name);
0x400878 <main+88>:  adrp    x0, 0x400000
0x40087c <main+92>:  add     x0, x0, #0x978
0x400880 <main+96>:  adrp    x1, 0x420000
0x400884 <main+100>: add     x1, x1, #0x58
0x400888 <main+104>: bl      0x400600 <printf@plt>

// Epilog and return 0  
0x40088c <main+108>: mov     w0, #0x0                                // #0
0x400890 <main+112>: ldp     x19, x30, [sp]
0x400894 <main+116>: add     sp, sp, #0x10
0x400898 <main+120>: ret


Data Section
+--------------------+--------------------+-----------------------+
|Address (in hex)    |Content (in hex)    |Description            |
+--------------------+--------------------+-----------------------+
|0x420044            |0x00000044          |grade                  |
+--------------------+--------------------+-----------------------+

BSS Section
+--------------------+-------------------------+
|Address (in hex)    |Desscription             |
+--------------------+-------------------------+
|0x420058            |'Will'                   |
+--------------------+-------------------------+
|0x42005C            |'iam '                   |
+--------------------+-------------------------+
|0x420060            |'and '                   |
+--------------------+-------------------------+
|0x420064            |'Will'                   |
+--------------------+-------------------------+
|0x420068            |'\0\0\0\0'               |
+--------------------+-------------------------+
|0x42006C            |'\0\0\0\0'               |
+--------------------+-------------------------+
|0x420070            |'\0\0\0\0'               |
+--------------------+-------------------------+
|0x420074            |'\0\0\0\0'               |
+--------------------+-------------------------+
|0x420078            |mov w0, 'A'              |
+--------------------+-------------------------+
|0x42007C            |adr, x1, grade           |
+--------------------+-------------------------+
|0x420080            |strb w0, [x1]            |
+--------------------+-------------------------+
|0x420084            |b [addr of printf]       |
+--------------------+-------------------------+

Stack Section
+-------+------------+
|Offset:|Description:|
|       |            |
+-------+------------+
|0      |x19         |
+-------+------------+
|8      |x20         |
+-------+------------+
|10     |x21         |
+-------+------------+
|18     |x30         |
+-------+------------+
|20     |buff        |
+-------+------------+
|28     |buff        |
+-------+------------+
|30     |buff        |
+-------+------------+
|38     |buff        |
+-------+------------+
|40     |buff        |
+-------+------------+
|48     |buff        |
+-------+------------+
|50     |x30         |
+-------+------------+

BSS of A+
+--------------------+--------------------+
|Address (in hex)    |Description         |
+--------------------+--------------------+
|0x420058            |'Will'              |
+--------------------+--------------------+
|0x42005C            |'iam '              |
+--------------------+--------------------+
|0x420060            |'and '              |
+--------------------+--------------------+
|0x420064            |'Will'              |
+--------------------+--------------------+
|0x420068            |'\0\0\0\0'          |
+--------------------+--------------------+
|0x42006c            |mov x0, '+'         |
+--------------------+--------------------+
|0x420070            |adr x1, [grade]     |
+--------------------+--------------------+
|0x420074            |strb x1, [x0]       |
+--------------------+--------------------+
|0x420078            |adr x0, [address of |
|                    |string in BSS]      |
+--------------------+--------------------+
|0x42007c            |adr x1, [adress of  |
|                    |string in RODATA]   |
+--------------------+--------------------+
|0x420080            |b [address of call  |
|                    |to printString]     |
+--------------------+--------------------+
|0x420084            |'A\0\0\0'           |
+--------------------+--------------------+
